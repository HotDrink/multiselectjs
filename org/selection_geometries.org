* Selection geometries

{{{msjs}}} provides a handful of common selection geometries.  They
are not included in the main package, but each can be included
separately.  Each file is a commonJS module. Each imports the
~default_geometry~ module with =require=, and inherits from
~DefaultGeometry~.

** Import default geometry

#+NAME: import-default-geometry
#+BEGIN_SRC js
var dg = require("./default_geometry");
#+END_SRC

** Ordered geometries

Ordered geometries are for totally ordered elements.
We assume that they are indexed by natural numbers up to
some predefined maximum. We provide both horizontal
and vertical variations.

The selection space is the set of indices.
Only the anchor and the active end matter in these geometries:
the active set is all the elements within the closed range defined by 
the anchor and the active end.
The ~null~ coordinate is considered to be a "no coordinate"; and 
~extendPath~ will ignore it.

To use one of the ordered geometries, one inherits from it, 
and defines the ~m2v~ method as appropriate.

#+BEGIN_SRC js :tangle ../js/ordered_geometries.js :noweb yes :exports none :padline no
<<import-default-geometry>>
<<ordered-geometry>>
<<vertical-geometry>>
<<horizontal-geometry>>
#+END_SRC

#+NAME: ordered-geometry
#+BEGIN_SRC js
// size is the number of elements
var OrderedGeometry = function (size) {
  dg.DefaultGeometry.call(this);
  this._size = size;
};

OrderedGeometry.prototype = Object.create(dg.DefaultGeometry.prototype);
OrderedGeometry.prototype.constructor = OrderedGeometry;

OrderedGeometry.prototype.size = function() { return this._size; }

// retain only the anchor and the active end, ignore null points
OrderedGeometry.prototype.extendPath = function(spath, vpoint) {
  if (vpoint === null) return null;
  if (spath.length === 2) spath.pop();
  spath.push(vpoint);
};

// selection domain is the range between anchor and active end 
OrderedGeometry.prototype.selectionDomain = function (spath) {
  var J = dg.makeEmptyMap();
  if (spath.length === 0) return J;

  var b = Math.max(0, Math.min(dg.anchor(spath), dg.activeEnd(spath)));
  var e = Math.min(this.size()-1, Math.max(dg.anchor(spath), dg.activeEnd(spath)));
  for (var i = b; i<=e; ++i) J.set(i, true);
  return J; 
};

// iterate from 0 to size-1
OrderedGeometry.prototype.filter = function (predicate) {
  var J = dg.makeEmptyMap();
  for (var i = 0; i < this.size(); ++i) if (predicate(i)) J.set(i, true);
  return J;
};

exports.OrderedGeometry = OrderedGeometry;
#+END_SRC

The vertical and horizontal geometries agument the ordered
geometry, respectively, with the ability to step up/down and
left/right with the arrow functions:

#+NAME: vertical-geometry
#+BEGIN_SRC js
var VerticalGeometry = function (size) {
  OrderedGeometry.call(this, size);
};

VerticalGeometry.prototype = Object.create(OrderedGeometry.prototype);
VerticalGeometry.prototype.constructor = VerticalGeometry;

VerticalGeometry.prototype.step = function (dir, vpoint) {
  switch (dir) {
    case dg.UP: return Math.max(0, vpoint-1);
    case dg.DOWN: return Math.min(this.size()-1, vpoint+1);
    default: return vpoint;
  }
};

VerticalGeometry.prototype.defaultCursor = function (dir) {
  switch (dir) {
  case dg.UP: return this.size()-1;
  case dg.DOWN: return 0; 
  default: return undefined;
  }
};

exports.VerticalGeometry = VerticalGeometry;
#+END_SRC

#+NAME: horizontal-geometry
#+BEGIN_SRC js
var HorizontalGeometry = function (size) {
  OrderedGeometry.call(this, size);
};

HorizontalGeometry.prototype = Object.create(OrderedGeometry.prototype);
HorizontalGeometry.prototype.constructor = HorizontalGeometry;

HorizontalGeometry.prototype.step = function (dir, vpoint) {
  switch (dir) {
    case dg.LEFT: return Math.max(0, vpoint-1);
    case dg.RIGHT: return Math.min(this.size()-1, vpoint+1);
    default: return vpoint;
  }
};

HorizontalGeometry.prototype.defaultCursor = function (dir) {
  switch (dir) {
  case dg.LEFT: return 0; 
  case dg.RIGHT: return this.size()-1;
  default: return undefined;
  }
};

exports.HorizontalGeometry = HorizontalGeometry;
#+END_SRC

** Coordinate system for an array of DOM objects

Similarly to ordered geometries, there are three variations of DOM geometries:
~DomGeometry~, ~VerticalDomGeometry~, and ~HorizontalDomGeometry~.
What they add to those geometries is the ~m2v~ function that
maps a mouse coordinate to the index of the element where it lands.
If the coordinate falls under no element, ~m2v~ returns ~null~.

#+BEGIN_SRC js :tangle ../js/dom_geometries.js :noweb yes :exports none :padline no
var og = require("./ordered_geometries");
#+END_SRC

The constructor takes an array of DOM elements. 
These are considered to be in order.
Given a mouse coordinate, ~m2v~ converts that coordinate to the index
of the DOM element in this array.

#+NAME: dom-geometries
#+BEGIN_SRC js 
var DomGeometry = function (parent, elements) {
  OrderedGeometry.call(this, elements.length);
  
  this._parent = parent;
  this._elements = elements;
};
DomGeometry.prototype = Object.create(dg.OrderedGeometry.prototype);
DomGeometry.constructor = DomGeometry;

DomGeometry.prototype.m2v = m2vCommon;

var VerticalDomGeometry = function (parent, elements) {
  DomGeometry.call(this, parent, elements.length);
};
VerticalDomGeometry.prototype = Object.create(DomGeometry.prototype);
VerticalDomGeometry.constructor = VerticalDomGeometry;

VerticalDomGeometry.prototype.m2v = m2vCommon;

var HorizontalDomGeometry = function (parent, elements) {
  DomGeometry.call(this, parent, elements.length);
};
HorizontalDomGeometry.prototype = Object.create(DomGeometry.prototype);
HorizontalDomGeometry.constructor = HorizontalDomGeometry;

HorizontalDomGeometry.prototype.m2v = m2vCommon;

// This helper is used by all dom geometries
function m2vCommon = function (vpoint) {

  for (var i=0; i<this._elements.length; ++i) {
    if (Rect.pointInRects(vpoint, 
                          Rect.getOffsetRects(
                            this._parent, this._elements[i])))
      return i;
  }
  return null;
};

  // helper functions
function pointInRect (p, r) {
  return p.x >= r.left && p.x <= r.right && p.y >= r.top && p.y <= r.bottom; 
}

function pointInRects (p, rs) {
  for (var i = 0; i < rs.length; ++i)
    if (pointInRect(p, rs[i])) return true;
  return false;
}

function relativeToParent(pRect, eRect) {
  return {
    left: eRect.left - pRect.left,
    top: eRect.top - pRect.top,
    right: eRect.right - pRect.left,
    bottom: eRect.bottom - pRect.top
  }
}

function getOffsetRects(parent, elem) {
  var parentBox = parent.getBoundingClientRect();
  var boxes = elem.getClientRects();
  var res = [];
  for (var i = 0; i < boxes.length; ++i) {
    res[i] = relativeToParent(parentBox, box);
  }
  return res;
}

  
exports.DomGeometry = DomGeometry;
exports.VerticalDomGeometry = VerticalDomGeometry;
exports.HorizontalDomGeometry = HorizontalDomGeometry;
#+END_SRC


** COMMENT IPhoto Coordinate system for an array of DOM objects 

The constructor takes an array of DOM elements. 
These are considered to be in order.
Given a mouse coordinate, ~m2v~ converts that coordinate to the index
of the DOM element in this array.

#+NAME: iphoto-dom-cs
#+BEGIN_SRC js 
var IPhotoDomGeometry = function (parent, elements) {
  return DomGeometry.call(this, parent, elements);
};
IPhotoDomGeometry.prototype = Object.create(DomGeometry.prototype);
IPhotoDomGeometry.constructor = IPhotoDomGeometry;

IPhotoDomGeometry.prototype.m2v = function (mpoint) {
  for (var i=0; i<this._elements.length; ++i) {
    if (Rect.pointInRects(mpoint, 
                            Rect.getOffsetRects(
                              this._parent, this._elements[i])))
      return { index: i, location: mpoint }
  }
  return { index: undefined, location: mpoint };
};
IPhotoDomGeometry.prototype.v2m = function (mpoint) {
  if (mpoint === undefined) return mpoint;
  if (mpoint.location !== undefined) return mpoint.location;
  return Rect.midPoint(Rect.getOffsetRects(this._parent, this._elements[mpoint.index])[0]);
}
IPhotoDomGeometry.prototype.vpath2mpath = function (vpath) {
  return vpath.map(function (mp) { return mp.location; });
}

IPhotoDomGeometry.prototype.defaultCursor = function (dir) {
  switch (dir) {
    case M.RIGHT: return { index: -1 };
    case M.LEFT: return { index: this.size() };
    default: return undefined;
  }
};
IPhotoDomGeometry.prototype.step = function (dir, vpoint) {
  if (vpoint.index === undefined) return vpoint;
  switch (dir) {
    case M.LEFT: return { index: Math.max(0, vpoint.index-1) };
    case M.RIGHT: return { index: Math.min(this.size()-1, vpoint.index+1) };
    default: return vpoint;
  }
};

IPhotoDomGeometry.prototype.boundToElement = function (vpoint) {
  return vpoint.index !== undefined;
};
IPhotoDomGeometry.prototype.extendPath = function (spath, vpoint) {
  if (spath.length === 0) return [];
  if (this.boundToElement(anchor(spath))) {
    if (!this.boundToElement(vpoint)) return spath;
  } else {
    vpoint.index = undefined; // set vpoint not be bound to element
  }
  spath.push(vpoint); 
  return spath;
//  return DomGeometry.prototype.extendPath.call(this, spath, vpoint);
};

IPhotoDomGeometry.prototype.selectionDomain = function (spath) {
  var J = dg.makeEmptyMap();
  if (spath.length === 0) return J;
  if (this.boundToElement(anchor(spath))) {
    return DomGeometry.prototype.selectionDomain.call(
      this, spath.map(function (v) { return v.index; }));
  }
  else
  {
    var bbox = Rect.rect(anchor(spath).location, M.activeEnd(spath).location);
    for (var i=0; i<this._elements.length; ++i) {
      if (Rect.intersectWithAny(bbox,
                                Rect.getOffsetRects(
                                  this._parent, this._elements[i])))
        J.set(i, true);
    }
  }
  return J;
}; 
  
exports.IPhotoDomGeometry = IPhotoDomGeometry;
#+END_SRC

* Export configuration                                     :ARCHIVE:noexport:
  
  #+SETUPFILE: org-settings.org
  #+TITLE:     {{{msjs}}} --- ~selection_geometries.org~
  #+AUTHOR:    Jaakko Järvi
  #+EMAIL:     jarvij@gmail.com
  #+DATE:      
  
  
* File local variables                                     :ARCHIVE:noexport:
  
# Local Variables:
# mode: org
# org-html-postamble: nil
# org-src-preserve-indentation: t 
# org-babel-use-quick-and-dirty-noweb-expansion: t
# End:





